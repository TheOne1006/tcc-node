//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./tcc_types');
//HELPER FUNCTIONS AND STRUCTURES

var TranTcc_ping_args = function(args) {
};
TranTcc_ping_args.prototype = {};
TranTcc_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TranTcc_ping_args.prototype.write = function(output) {
  output.writeStructBegin('TranTcc_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TranTcc_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TranTcc_ping_result.prototype = {};
TranTcc_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TranTcc_ping_result.prototype.write = function(output) {
  output.writeStructBegin('TranTcc_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TranTcc_createInstance_args = function(args) {
  this.projectKey = null;
  this.processKey = null;
  this.messageId = null;
  this.payload = null;
  if (args) {
    if (args.projectKey !== undefined && args.projectKey !== null) {
      this.projectKey = args.projectKey;
    }
    if (args.processKey !== undefined && args.processKey !== null) {
      this.processKey = args.processKey;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = Thrift.copyMap(args.payload, [null]);
    }
  }
};
TranTcc_createInstance_args.prototype = {};
TranTcc_createInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.processKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.payload = {};
        var _rtmp316 = input.readMapBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var key18 = null;
          var val19 = null;
          key18 = input.readString();
          val19 = input.readString();
          this.payload[key18] = val19;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TranTcc_createInstance_args.prototype.write = function(output) {
  output.writeStructBegin('TranTcc_createInstance_args');
  if (this.projectKey !== null && this.projectKey !== undefined) {
    output.writeFieldBegin('projectKey', Thrift.Type.STRING, 1);
    output.writeString(this.projectKey);
    output.writeFieldEnd();
  }
  if (this.processKey !== null && this.processKey !== undefined) {
    output.writeFieldBegin('processKey', Thrift.Type.STRING, 2);
    output.writeString(this.processKey);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.payload));
    for (var kiter20 in this.payload) {
      if (this.payload.hasOwnProperty(kiter20)) {
        var viter21 = this.payload[kiter20];
        output.writeString(kiter20);
        output.writeString(viter21);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TranTcc_createInstance_result = function(args) {
  this.success = null;
  this.em = null;
  if (args instanceof ttypes.ErrorMessage) {
    this.em = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TccInstance(args.success);
    }
    if (args.em !== undefined && args.em !== null) {
      this.em = args.em;
    }
  }
};
TranTcc_createInstance_result.prototype = {};
TranTcc_createInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TccInstance();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.em = new ttypes.ErrorMessage();
        this.em.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TranTcc_createInstance_result.prototype.write = function(output) {
  output.writeStructBegin('TranTcc_createInstance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.em !== null && this.em !== undefined) {
    output.writeFieldBegin('em', Thrift.Type.STRUCT, 1);
    this.em.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TranTccClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
TranTccClient.prototype = {};
TranTccClient.prototype.seqid = function() { return this._seqid; };
TranTccClient.prototype.new_seqid = function() { return this._seqid += 1; };

TranTccClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

TranTccClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  var args = new TranTcc_ping_args();
  try {
    output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TranTccClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TranTcc_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};

TranTccClient.prototype.createInstance = function(projectKey, processKey, messageId, payload, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createInstance(projectKey, processKey, messageId, payload);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createInstance(projectKey, processKey, messageId, payload);
  }
};

TranTccClient.prototype.send_createInstance = function(projectKey, processKey, messageId, payload) {
  var output = new this.pClass(this.output);
  var params = {
    projectKey: projectKey,
    processKey: processKey,
    messageId: messageId,
    payload: payload
  };
  var args = new TranTcc_createInstance_args(params);
  try {
    output.writeMessageBegin('createInstance', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

TranTccClient.prototype.recv_createInstance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TranTcc_createInstance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.em) {
    return callback(result.em);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createInstance failed: unknown result');
};
var TranTccProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
TranTccProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
TranTccProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new TranTcc_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping.bind(this._handler)
    ).then(function(result) {
      var result_obj = new TranTcc_ping_result({success: result});
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ping(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new TranTcc_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
TranTccProcessor.prototype.process_createInstance = function(seqid, input, output) {
  var args = new TranTcc_createInstance_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createInstance.length === 4) {
    Q.fcall(this._handler.createInstance.bind(this._handler),
      args.projectKey,
      args.processKey,
      args.messageId,
      args.payload
    ).then(function(result) {
      var result_obj = new TranTcc_createInstance_result({success: result});
      output.writeMessageBegin("createInstance", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.ErrorMessage) {
        result = new TranTcc_createInstance_result(err);
        output.writeMessageBegin("createInstance", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createInstance", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createInstance(args.projectKey, args.processKey, args.messageId, args.payload, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ErrorMessage) {
        result_obj = new TranTcc_createInstance_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createInstance", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createInstance", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
